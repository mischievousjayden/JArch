================================================================================
                               [ Install Arch ]
================================================================================

Part1) Partition
wipefs --all /dev/sd@
gdisk /dev/sd@
Number   Size   Code   Name
1        2M     ef02   Bios boot partition
2        [??]   8200   Linux swap
3        512M   8300   Linux filesystem      # /boot
4        [??]   8300   Linux filesystem      # /

lsblk /dev/sd@
mkswap /dev/sd@2
swapon /dev/sd@2
mkfs.ext4 /dev/sd@3
mkfs.ext4 /dev/sd@4


Part 2) Install Arch
mount /dev/sd@4 /mnt
mkdir -p /mnt/boot
mount /dev/sd@3 /mnt/boot
pacman -Syyu
pacstrap -i /mnt base base-devel


Part 3) Config
genfstab -U -p /mnt >> /mnt/etc/fstab
arch-chroot /mnt /bin/bash
passwd

vi /etc/locale.gen
    unblock 'en_US.UTF-8 UTF-8' and 'en_US ISO-8858-1'
locale-gen
export LANG=en_US.UTF-8
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
hwclock --systohc --utc

echo '[machine name]' > /etc/hostname
vi /etc/hosts
    add '[machine name]' to end of lines

ip link
-----------------------------------------------------------
# wire connection
systemctl enable dhcpcd@[name].service
-----------------------------------------------------------
# wifi connection
pacman -Syyu
pacman -S iw wpa_supplicant
pacman -S dialog
pacman -S wpa_actiond
systemctl enable netctl-auto@[name].service
-----------------------------------------------------------


Part 4) Bootloader
pacman -Syyu
pacman -S grub-bios
grub-install /dev/sd@
mkinitcpio -p linux
grub-mkconfig -o /boot/grub/grub.cfg
exit
reboot


Part Option) Create group and user
groupadd mygroup # create group 'mygroup'
useradd -m -s /bin/bash -g mygroup myid # create user 'myid' in group 'mygroup', default shell is bash
passwd myid # change password
echo "myid ALL=(ALL) ALL" >> /etc/sudoers # Add sudo


Part Option) Install Gnome
pacman -Syy xorg
pacman -Syy xterm xorg-xclock xorg-twm xorg-xinit xorg-server-utils
pacman -Syy gnome gnome-extra gnome-tweak-tool
systemctl enable gdm
localectl set-locale LANG="en_US.UTF-8"
------------------------------------------
vi /mnt/etc/fstab
    unblock WaylandEnable=false
------------------------------------------



================================================================================
                              [ Archiso with ZFS ]
================================================================================

Part 1) Download archiso
pacman -S archiso
mkdir archiso-zfs
cp -r /usr/share/archiso/configs/releng/* ./archiso-zfs
cd archiso-zfs


Part 2) Customize
------   ZFS   ------
echo '[archzfs]' >> pacman.conf
echo 'SigLevel = Optional TrustAll' >> pacman.conf
echo 'Server = http://archzfs.com/$repo/x86_64' >> pacman.conf
echo 'archzfs-linux' >> packages.x86_64


Part 3) Create ISO
./build.sh -v


Part 4) Move to USB
cd out
wipefs --all /dev/sd@
dd if=[iso] of=/dev/sd@ bs=4M status=progress && sync



================================================================================
                              [ Arch on ZFS ]
================================================================================

Part 1) Partition
wipefs --all /dev/[sd@]
gdisk /dev/sd@
Number   Size   Code   Name
1        2M     ef02   Bios boot partition
2        512M   8300   Linux filesystem      # /boot
3               bf00   Solaris root          # zroot

mkfs.ext4 /dev/sd@2


Part Option) Install ZFS
echo '[archzfs]' >> /etc/pacman.conf
echo 'Server = http://archzfs.com/$repo/x86_64' >> /etc/pacman.conf
pacman-key -r 5E1ABF240EE7A126
pacman-key --lsign-key 5E1ABF240EE7A126
pacman -Syyu
pacman -S zfs-linux


Part 2) ZFS
modprobe zfs
zpool create -f zroot /dev/disk/by-id/[id-to-partition-part@]

zfs set compression=on zroot
zfs set atime=on zroot
zfs set relatime=on zroot

zfs create -o mountpoint=/home zroot/home
zfs create -o mountpoint=/root zroot/root

zfs set mountpoint=/ zroot
zfs set mountpoint=/home zroot/home
zfs set mountpoint=/root zroot/root

zfs umount -a
zpool set bootfs=zroot zroot
zpool export zroot
zpool import -d /dev/by-id -R /mnt zroot
< Note > - when 'zpool import -d /dev/by-id -R /mnt zroot' does not work
-d is not the actual device id, but the /dev/by-id directory containing the symbolic links.
If this command fails and you are asked to import your pool via its numeric ID,
run zpool import to find out the ID of your pool then use a command
such as: zpool import 9876543212345678910 -R /mnt zroot


Part Option) Check mount point
1. mount
2. df -h
3. zfs list


Part 3) Install Arch
mkdir /mnt/boot
mount /dev/sd@2 /mnt/boot
cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache
zpool set cachefile=/etc/zfs/zpool.cache zroot
pacstrap -i /mnt base base-devel


Part 4) Config
genfstab -U -p /mnt >> /mnt/etc/fstab
------------------------------------------
vi /mnt/etc/fstab
    block all line related with zroot
------------------------------------------
------------------------------------------
vi /mnt/etc/mkinitcpio.conf
    From
        HOOKS="base udev autodetect modconf block filesystems keyboard fsck"
    To
        HOOKS="base udev autodetect modconf block keyboard zfs filesystems fsck"
------------------------------------------
arch-chroot /mnt /bin/bash
    < Do Part 3 in Install Arch >


Part 5) Install ZFS
echo '[archzfs]' >> /etc/pacman.conf
echo 'Server = http://archzfs.com/$repo/x86_64' >> /etc/pacman.conf
pacman-key -r 5E1ABF240EE7A126
pacman-key --lsign-key 5E1ABF240EE7A126
pacman -Syyu
pacman -S zfs-linux


Part 6 ) Bootloader
pacman -S grub-bios
grub-install /dev/sd@
mkinitcpio -p linux
------------------------------------------
vi /boot/grub/grub.cfg
set timeout=2
set default=0

# (0) Arch Linux
menuentry "Arch Linux" {
    linux /vmlinuz-linux zfs=zroot rw
    initrd /initramfs-linux.img
}
------------------------------------------
exit
umount /mnt/boot
zfs umount -a
zpool export zroot
reboot

