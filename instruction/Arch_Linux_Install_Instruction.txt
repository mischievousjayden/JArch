================================================================================
                             [ Pre-installation ]
================================================================================

[ USB ]
wipefs --all /dev/sd@
dd if=[iso] of=/dev/sd@ bs=4M status=progress && sync

[ Connect to the Internet ]
wifi-menu

[ Partition the disks ]
- wipefs --all /dev/sd@ # wipe file system
- BIOS: go to "Partition" at "Install Arch with Grub Bootloader" 
- UEFI: go to "Partition" at "Install Arch on UEFI"


================================================================================
                             [ Install Arch on UEFI ]
================================================================================

Part 1) Partition
# use gdisk
wipefs --all /dev/sd@
gdisk /dev/sd@
Number   Size   Code   Name
1        512M   ef00   EFI System            # /boot
2        [??]   8300   Linux filesystem      # /root
3        [??]   8300   Linux filesystem      # /home
4        [??]   8300   Linux filesystem      # /
5        [??]   8200   Linux swap

# use fdisk on command line
(
    echo g     # create a new empty GTP partition table
    echo n     # start to create EFI system partition for /boot
    echo       # select default partition number
    echo       # select first sector
    echo +512M # select last sector
    echo t     # change a partition type to
    echo 1     # EFI System
    echo n     # start to create partition for /root
    echo       # select default partition number
    echo       # select first sector
    echo +??   # select last sector
    echo n     # start to create partition for /home
    echo       # select default partition number
    echo       # select first sector
    echo +??   # select last sector
    echo n     # start to create partition for /
    echo       # select default partition number
    echo       # select first sector
    echo -??   # select last sector left for swap partition
    echo n     # start to create swap partition
    echo       # select default partition number
    echo       # select first sector for swap partition
    echo +??   # select last sector for swap partition
    echo t     # change a partition type
    echo 5     # select partition 5
    echo 19    # linux swap
    echo w     # save
) | fdisk /dev/sd@

# Make swap & Format the partitions
lsblk /dev/sd@
mkswap /dev/sd@5
swapon /dev/sd@5
mkfs.fat /dev/sd@1
mkfs.ext4 /dev/sd@2
mkfs.ext4 /dev/sd@3
mkfs.ext4 /dev/sd@4


Part 2) Install Arch
# mount root
mount /dev/sd@4 /mnt

# create boot, root, home directories
mkdir -p /mnt/{boot,root,home}

# mount boot directory
mount /dev/sd@1 /mnt/boot

# mount root directory
mount /dev/sd@2 /mnt/root

# mount home directory
mount /dev/sd@3 /mnt/home

# install arch
pacman -Syy
pacstrap -i /mnt base base-devel


Part 3) Config
# Fstab
genfstab -U -p /mnt >> /mnt/etc/fstab

# chroot
arch-chroot /mnt /bin/bash

# root password
passwd

# Time zone
ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc

# Localization
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" >> /etc/locale.conf

# microcode (optional)
for amd cpu, pacman -Sy amd-ucode
for intel cpu, pacman -Sy intel-ucode


Part 4) Network config
echo "[machine name]" > /etc/hostname
------------------------------------------
vi /etc/hosts
#<ip-address>   <hostname.domain.org>   <hostname>
127.0.0.1       localhost.localdomain   localhost [machine name]
::1             localhost.localdomain   localhost [machine name]
------------------------------------------
ip link # check interface name

< netctl >
    systemctl enable dhcpcd@[interface].service # wire connection

    # wireless setting (optional)
    pacman -S dialog wpa_supplicant # netctl dependency for wifi-menu comman
    pacman -S wpa_actiond # for systemctl 
    systemctl enable netctl-auto@[interface].service # netctl profiles will be started automatically

< NetworkManager >
    pacman -S networkmanager
    systemctl enable NetworkManager.service

Part 5) Bootloader 
< grub >
    pacman -S grub efibootmgr
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB # install grub
    grub-mkconfig -o /boot/grub/grub.cfg # create grub config

< Systemd-boot >
    # reference
    # https://wiki.archlinux.org/index.php/Systemd-boot
    bootctl install
    ------------------------------------------
    vi /boot/loader/loader.conf
        default arch
        timeout 4
        editor 0
    ------------------------------------------

    # linux and initrd point files under /boot/
    # For linux (not lts)
    ------------------------------------------
    vi /boot/loader/entries/arch.conf
        title Archlinux
        linux /vmlinuz-linux
        initrd /initramfs-linux.img
        options root=PARTUUID=<partuuid of /dev/sd@5 to mount root> rw
    ------------------------------------------
    # For linux-lts
    ------------------------------------------
    vi /boot/loader/entries/arch.conf
        title Archlinux
        linux /vmlinuz-linux-lts
        initrd /initramfs-linux-lts.img
        options root=PARTUUID=<partuuid of /dev/sd@5 to mount root> rw
    ------------------------------------------


Part 6) reboot
exit
umount -R /mnt
reboot


================================================================================
                         [ Install Arch with Grub Bootloader ]
================================================================================

Part 1) Partition
# Use gdisk
wipefs --all /dev/sd@
gdisk /dev/sd@
Number   Size   Code   Name
1        2M     ef02   Bios boot partition
2        512M   8300   Linux filesystem      # /boot
3        [??]   8300   Linux filesystem      # /root
4        [??]   8300   Linux filesystem      # /home
5        [??]   8300   Linux filesystem      # /
6        [??]   8200   Linux swap

# use fdisk on command line
(
    echo g     # create a new empty GTP partition table
    echo n     # start to create boot partition
    echo       # select default partition number
    echo       # select first sector for boot partition
    echo +2M   # select last sector for boot partition
    echo t     # change a partition type to
    echo 4     # BIOS boot
    echo n     # start to create partition for /boot
    echo       # select default partition number
    echo       # select first sector
    echo +512M # select last sector
    echo n     # start to create partition for /root
    echo       # select default partition number
    echo       # select first sector
    echo +??   # select last sector
    echo n     # start to create partition for /home
    echo       # select default partition number
    echo       # select first sector
    echo +??   # select last sector
    echo n     # start to create partition for /
    echo       # select default partition number
    echo       # select first sector
    echo -??   # select last sector left for swap partition
    echo n   # start to create swap partition
    echo     # select default partition number
    echo     # select first sector for swap partition
    echo     # select last sector for swap partition
    echo t   # change a partition type
    echo 6   # select partition 2
    echo 19  # linux swap
    echo w   # save
) | fdisk /dev/sd@

# Make swap & Format the partitions
lsblk /dev/sd@
mkswap /dev/sd@6
swapon /dev/sd@6
mkfs.ext4 /dev/sd@2
mkfs.ext4 /dev/sd@3
mkfs.ext4 /dev/sd@4
mkfs.ext4 /dev/sd@5


Part 2) Install Arch
# mount root
mount /dev/sd@5 /mnt

# create boot, root, home directories
mkdir -p /mnt/{boot,root,home}

# mount boot directory
mount /dev/sd@2 /mnt/boot

# mount root directory
mount /dev/sd@3 /mnt/root

# mount home directory
mount /dev/sd@4 /mnt/home

# install arch
pacman -Syy
pacstrap -i /mnt base base-devel


Part 3) Config
# Fstab
genfstab -U -p /mnt >> /mnt/etc/fstab

# chroot
arch-chroot /mnt /bin/bash

# root password
passwd

# Time zone
ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc

# Localization
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" >> /etc/locale.conf

# Network configuration
echo "[machine name]" > /etc/hostname
------------------------------------------
vi /etc/hosts
#<ip-address>   <hostname.domain.org>   <hostname>
127.0.0.1       localhost.localdomain   localhost [machine name]
::1             localhost.localdomain   localhost [machine name]
------------------------------------------
ip link # check interface name
systemctl enable dhcpcd@[interface].service # wire connection

# wireless setting (optional)
pacman -Sy dialog wpa_supplicant # netctl dependency for wifi-menu comman
pacman -Sy wpa_actiond # for systemctl 
systemctl enable netctl-auto@[interface].service # netctl profiles will be started automatically

# microcode (optional)
for amd cpu, pacman -Sy amd-ucode
for intel cpu, pacman -Sy intel-ucode

# Bootloader
pacman -Sy grub-bios
grub-install --target=i386-pc /dev/sd@ # install grub
grub-mkconfig -o /boot/grub/grub.cfg # create grub config

# reboot
exit
umount -R /mnt
reboot


[ old instruction ]
(1) from git
curl https://raw.githubusercontent.com/mischievousjayden/JArch/master/instruction/script/arch_config.sh | sh /dev/stdin 'machinename'

(2) from scratch
------------------------------------------
vi /etc/locale.gen
    unblock "en_US.UTF-8 UTF-8"
------------------------------------------
locale-gen
export LANG=en_US.UTF-8
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
hwclock --systohc --utc

echo '[machine name]' > /etc/hostname
------------------------------------------
vi /etc/hosts
    add "[machine name]" to end of lines
------------------------------------------


Part 4) Network config
ip link

# wire connection
systemctl enable dhcpcd@[name].service

# wifi connection
pacman -Syu
pacman -S iw wpa_supplicant dialog wpa_actiond
systemctl enable netctl-auto@[interface].service


Part 5) Bootloader
pacman -Syu
pacman -S grub-bios
grub-install /dev/sd@
mkinitcpio -p linux
grub-mkconfig -o /boot/grub/grub.cfg


exit
reboot



================================================================================
                              [ Archiso with ZFS ]
================================================================================

Part 1) Download archiso
pacman -Syu archiso
mkdir archiso-zfs
cp -r /usr/share/archiso/configs/releng/* ./archiso-zfs
cd archiso-zfs


Part 2) Customize
------   ZFS   ------
------------------------------------------
vi pacman.conf
# add following end of file
    [archzfs]
    SigLevel = Optional TrustAll
    Server = http://archzfs.com/$repo/x86_64
------------------------------------------
# for linux (not lts)
------------------------------------------
vi packages.x86_64
# add following end of file
    archzfs-linux
------------------------------------------
# for linux-lts
------------------------------------------
vi packages.x86_64
# add following end of file
    archzfs-linux-lts
------------------------------------------

Kernel Mismatch)
# reference
# https://ramsdenj.com/2016/06/23/arch-linux-on-zfs-part-1-embed-zfs-in-archiso.html

mkdir -p /root/{customrepo/x86_64,pkg}
# for linux (not lts)
wget "https://archive.archlinux.org/packages/l/linux/linux-${version}-x86_64.pkg.tar.xz" -P /root/pkg
# for linux-lts
wget "https://archive.archlinux.org/packages/l/linux-lts/linux-lts-${version}-x86_64.pkg.tar.xz" -P /root/pkg

repo-add /root/customrepo/x86_64/customrepo.db.tar.gz /root/pkg/linux-${version}-x86_64.pkg.tar.xz

------------------------------------------
vi pacman.conf
# add following end of file
    [customrepo]
    SigLevel = Optional TrustAll
    Server = file:///root/customrepo/$arch
------------------------------------------


Part 3) Create ISO
./build.sh -v


Part 4) Move to USB
cd out
wipefs --all /dev/sd@
dd if=[iso] of=/dev/sd@ bs=4M status=progress && sync



================================================================================
                              [ Arch on ZFS ]
================================================================================

< Install ZFS >
(1) from git
curl https://raw.githubusercontent.com/mischievousjayden/JArch/master/instruction/script/zfs_install.sh | sh

(2) from scratch
------------------------------------------
vi /etc/pacman.conf
# add following end of file
    [archzfs]
    Server = http://archzfs.com/$repo/x86_64
------------------------------------------
pacman-key -r 5E1ABF240EE7A126
pacman-key --lsign-key 5E1ABF240EE7A126
pacman -Syy
pacman -S zfs-linux

Tip) Check mount point
1. mount
2. df -h
3. zfs mount

Tip) Check zfs
zpool list
zfs lsit


Part 1) Partition
wipefs --all /dev/[sd@]
gdisk /dev/sd@
Number   Size   Code   Name
1        2M     ef02   Bios boot partition
2        [??]   8200   Linux swap
3        512M   8300   Linux filesystem      # /boot
4        [??]   bf00   Solaris root          # zroot

lsblk /dev/sd@
mkswap /dev/sd@2
swapon /dev/sd@2
mkfs.ext4 /dev/sd@3


Part Option) Install ZFS
Follow "< Install ZFS >"


Part 2) ZFS
modprobe zfs
zpool create -f zroot /dev/disk/by-id/[id-to-partition-part@]

zfs set compression=on zroot
zfs set atime=on zroot
zfs set relatime=on zroot

zfs create -o mountpoint=/home zroot/home
zfs create -o mountpoint=/root zroot/root

zfs set mountpoint=/ zroot
zfs set mountpoint=/home zroot/home
zfs set mountpoint=/root zroot/root

zfs umount -a
zpool set bootfs=zroot zroot
zpool export zroot
zpool import -d /dev/by-id -R /mnt zroot
< Note > - when 'zpool import -d /dev/by-id -R /mnt zroot' does not work
-d is not the actual device id, but the /dev/by-id directory containing the symbolic links.
If this command fails and you are asked to import your pool via its numeric ID,
run zpool import to find out the ID of your pool then use a command
such as: zpool import 9876543212345678910 -R /mnt zroot


Part 3) Install Arch
mkdir /mnt/boot /mnt/etc /mnt/etc/zfs
mount /dev/sd@3 /mnt/boot
cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache
zpool set cachefile=/etc/zfs/zpool.cache zroot
pacstrap -i /mnt base base-devel


Part 4) Config
genfstab -U -p /mnt >> /mnt/etc/fstab
------------------------------------------
vi /mnt/etc/fstab
    block all line related with zroot
------------------------------------------
------------------------------------------
vi /mnt/etc/mkinitcpio.conf
    From
        HOOKS="base udev autodetect modconf block filesystems keyboard fsck"
    To
        HOOKS="base udev autodetect modconf block keyboard zfs filesystems fsck"
------------------------------------------
arch-chroot /mnt /bin/bash
    < Do Part 3 in Install Arch >


Part 5) Install ZFS
Follow "< Install ZFS >"


Part 6) Bootloader
(1) from git
curl https://raw.githubusercontent.com/mischievousjayden/JArch/master/instruction/script/zfs_grub_install.sh | sh /dev/stdin /dev/sd@

(2) from scratch
pacman -S grub-bios
grub-install /dev/sd@
mkinitcpio -p linux
------------------------------------------
vi /boot/grub/grub.cfg
set timeout=2
set default=0

# (0) Arch Linux
menuentry "Arch Linux" {
    linux /vmlinuz-linux zfs=zroot rw
    initrd /initramfs-linux.img
}
------------------------------------------

exit
umount /mnt/boot
zfs umount -a
zpool export zroot
reboot

